//go:build ignore

package main

import (
	"crypto"
	"crypto/rand"
	"fmt"
	"os"

	"go.uber.org/zap"

	"github.com/IPA-CyberLab/kmgm/pemparser"
	"github.com/IPA-CyberLab/kmgm/wcrypto"
)

func main() {
	logger := zap.NewExample().Sugar()

	rsa2048keys := []crypto.PrivateKey{}
	for i := 0; i < 10; i++ {
		logger.Infof("Generating rsa2048key[%d]:", i)
		pk, err := wcrypto.GenerateKey(rand.Reader, wcrypto.KeyRSA2048, "testkeys", logger.Desugar())
		if err != nil {
			panic(err)
		}
		rsa2048keys = append(rsa2048keys, pk)
	}

	rsa4096keys := []crypto.PrivateKey{}
	for i := 0; i < 10; i++ {
		logger.Infof("Generating rsa4096key[%d]:", i)
		pk, err := wcrypto.GenerateKey(rand.Reader, wcrypto.KeyRSA4096, "testkeys", logger.Desugar())
		if err != nil {
			panic(err)
		}
		rsa4096keys = append(rsa4096keys, pk)
	}

	eckeys := []crypto.PrivateKey{}
	for i := 0; i < 10; i++ {
		logger.Infof("Generating eckey[%d]:", i)
		pk, err := wcrypto.GenerateKey(rand.Reader, wcrypto.KeySECP256R1, "testkeys", logger.Desugar())
		if err != nil {
			panic(err)
		}
		eckeys = append(eckeys, pk)
	}

	f, err := os.Create("testkeys.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "package testkmgm")
	fmt.Fprintln(f, "// This file is autogenerated from generate_testkeys.go. Do not modify manually.")

	fmt.Fprintf(f, "var RSA2048Keys = []string{\n")
	for _, pk := range rsa2048keys {
		pemData, err := pemparser.MarshalPrivateKey(pk)
		if err != nil {
			panic(err)
		}
		fmt.Fprintf(f, "  `%s`,\n", pemData)
	}
	fmt.Fprintln(f, "}")

	fmt.Fprintf(f, "var RSA4096Keys = []string{\n")
	for _, pk := range rsa4096keys {
		pemData, err := pemparser.MarshalPrivateKey(pk)
		if err != nil {
			panic(err)
		}
		fmt.Fprintf(f, "  `%s`,\n", pemData)
	}
	fmt.Fprintln(f, "}")

	fmt.Fprintf(f, "var ECKeys = []string{\n")
	for _, pk := range eckeys {
		pemData, err := pemparser.MarshalPrivateKey(pk)
		if err != nil {
			panic(err)
		}
		fmt.Fprintf(f, "  `%s`,\n", pemData)
	}
	fmt.Fprintln(f, "}")
}
