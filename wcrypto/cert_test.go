package wcrypto_test

import (
	"testing"
	"time"

	"github.com/IPA-CyberLab/kmgm/pemparser"
	"github.com/IPA-CyberLab/kmgm/wcrypto"
)

const TestCertPem = `-----BEGIN CERTIFICATE-----
MIIE7jCCAtagAwIBAgIBATANBgkqhkiG9w0BAQsFADAXMRUwEwYDVQQDEwx3Y3J5
cHRvIHRlc3QwHhcNMTkxMDE3MTMxMDUxWhcNMjkxMDE0MTMxMTUxWjAXMRUwEwYD
VQQDEwx3Y3J5cHRvIHRlc3QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
AQDkVilip3w0ITSUEDsz3KpEgphf8cmCRei9hBScX+kdHVScrlPUMbT0ER+Kh37n
xKumANt2UKapX8OpFC+NTufmD4qxXJ5G9y9imG0adGe09BD3TXPf8BWV+HCkrLUb
il6s2simMkZ4KY/ddTVJawR1eMugNor+UWw344x3kD67uR1PmPOZqj+mbwfmfz0U
hkjGciS3Q+f4hr26XcJyNPGMcufQBOZEn1MQeSnsERlzFItrhV8mUb9CLhwBMREb
c3/fyPFE1oyH/ctfAyjRhBvUn9X+AE09yyMeymhfnr3SeFfujXnvA9cJVhNHDzty
hGoDNICXJWHMIWYbGgRclTjpCVr+Qpe7a/5Da5rtIxF/CacISjDMknyIVKhcWMrx
pcfScvyR3Enrdl9e3GrfmKLmYoGqD6ck1sCXE2BrdMOli+cDmGndpWOOLFAw12YM
4BuKvliMC0a7Q3zUW3r8elgyDk6mTqrsZquiEjPQ32fnDjQxBOum4yuy9D5fEibE
CUwkHyxpWieI9DBnEqE9BiZymzk6Qry/mvuPbF5i5UNwn6bObDLu0KHJOYf1UAwY
rqFIWJe99nUUg+w0fHrPln5vrDkW8a+sSOgvY9CNVjTIHSbZRF18fML1tOXiLzr7
T6oIjB9G6liVMlncwdiYotU79uwR+S9mtDcIWy7YC3VTKwIDAQABo0UwQzAOBgNV
HQ8BAf8EBAMCAqQwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUR47TuhD5
DSubRMt/80T1kV4KKz4wDQYJKoZIhvcNAQELBQADggIBAHNFc31lTXtyRr6B2IZE
qMDztLZ2BTHiNZ+bXdhiwCu5C79RVuZoyRM18k3b6/B+1g10jFoNwVGNzzok+h3h
OORojGWJA0HjN1drnl2cyWQ/MrdAsjvGcJ5X4jcTnm2mAfrg13OylF+iAqwT4CrJ
2oakymcQrXW8pGr2YOEVZEicGIzAAAWFFvWxESkGb2mztriEadLCg1t43EAeIFtM
kQD4+scWUsb/6WOfZ3j15Z7+gWfty7h5nkeEItJIpxWwDhVxlWug0GRdJzmZv1UA
wf66DkA6ulNCDiS/n28NFMRJqEuHwa5QV16YsK4W1kXaYOwa7q7qlThhJu9aznrN
HbXUXT4/6+lp2L8zzuWyllrRjAPqFQ/ZEqKw5sIlgwFaU9YP82Ly9IHIPigm0mtL
XthlWat7zkwxt1+QkwC3ADzrY/DfmX3VrYZBUTjJslTlEgz4OhBr+E5UpmOfLYRm
6NtzcUo9xEYlGuxxLexOXV/tRMZYKuhAPZzQmkuXJarDskewyA4GqdNGIlvFvWbz
HBvlRgSPzKUNromy7v0YihTdYayrJ2gZjokwjaYBeTWVl0+NawtcjsUr9vhVGp94
JsLTgS5vva9pGOWs5PHNiDfx0lIshklgTgr9sNSbIclLMAP0wK8t/U+Ub59EJJBK
GYgjLXpNp4gpO4bQ8ZN2O8Wa
-----END CERTIFICATE-----`

const TestKeyPem = `-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----`

const TestKey2Pem = `-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----`

var TestTime = time.Unix(1571318776, 0)

func TestVerifyCACertAndKey(t *testing.T) {
	priv, err := pemparser.ParsePrivateKey([]byte(TestKeyPem))
	if err != nil {
		t.Fatalf("ParsePrivateKey: %v", err)
	}

	certs, err := pemparser.ParseCertificates([]byte(TestCertPem))
	if err != nil {
		t.Fatalf("ParseCertificates: %v", err)
	}
	cert := certs[0]

	if err := wcrypto.VerifyCACertAndKey(priv, cert, TestTime); err != nil {
		t.Errorf("Should pass but got err: %v", err)
	}

	wrongPriv, err := pemparser.ParsePrivateKey([]byte(TestKey2Pem))
	if err != nil {
		t.Fatalf("ParsePrivateKey: %v", err)
	}

	err = wcrypto.VerifyCACertAndKey(wrongPriv, cert, TestTime)
	if err == nil {
		t.Errorf("Should fail but passed")
	}
	t.Logf("expected err: %v", err)
}
